<?php
/**
 * We are in CLI
 */
define('WS_CLI',true);
/**
 * Normally when artisan is in wp root directory it will not run if plugin is not active
 * Force cli mode will always load cli even plugin is not active
 */
define('WS_CLI_FORCE',false);
/**
 * -----------------
 * Bootstrap
 * ----------------
 * We start to check where binary located, supported locations
 * for artisan binary are plugin directory and WordPress directory.
 * When binary is in plugin directory artisan will always be handled.
 * When binary is in root directory we will check if `WS_CLI_FORCE` flag
 * is enabled or not, if force flag is not enabled command only run
 * when plugin is enabled.
 */
if(file_exists(__DIR__.'/WordpressStarter.php') && file_exists(__DIR__.'/bootstrap/autoload-cli.php')){
    //Binary in plugin
    define('WS_DIR',__DIR__);
}elseif(file_exists(__DIR__.'/wp-load.php')){
    //Binary in wp root
    $wpConfigFound=file_exists(__DIR__.'/wp-config.php') ||
        (file_exists( dirname( __DIR__ ) . '/wp-config.php' ) && ! file_exists( dirname( __DIR__ ) . '/wp-settings.php' ));
    $wpsFinder=function(){
        if(defined('WS_DIR')){
            return WS_DIR;
        }
        $directories=[__DIR__,__DIR__.'/wp-content/plugins'];
        $found=null;
        foreach ($directories as $directory) {
            $handle = @opendir($directory);
            if (!$handle) {
                return null;
            }
            while (false !== ($entry = @readdir($handle))) {
                if ($entry != "." && $entry != ".." && file_exists($directory . "/" . $entry . "/WordpressStarter.php")) {
                    @closedir($handle);
                    $found = $directory . "/" . $entry;
                    break 2;
                }
            }
            @closedir($handle);
        }
        return $found;
    };
    if(WS_CLI_FORCE){
        if($wpsBasePath=$wpsFinder()){
            define('WS_DIR',$wpsBasePath);
        }elseif($wpConfigFound){
            include __DIR__.'/wp-load.php';
        }

    }else{
        if($wpConfigFound){
            include __DIR__.'/wp-load.php';
        }elseif($wpsBasePath=$wpsFinder()){
            define('WS_DIR',$wpsBasePath);
        }
    }
    unset($wpsFinder);
    unset($wpsBasePath);
    unset($wpConfigFound);

}
/**
 * Get the kernel
 * When plugin activated kernel instance will be obtained via WordpressStarter class
 * When plugin is not activated it will try to create new kernel from app
 *
 */
$kernel=null;
if(defined('WS_DIR') && file_exists(WS_DIR . '/bootstrap/autoload-cli.php')) {
    require WS_DIR . '/bootstrap/autoload-cli.php';
}
if(class_exists('WordpressStarter')){//Plugin activated
    $kernel=WordpressStarter::make()->kernel();
}elseif(defined('WS_DIR') && file_exists(WS_DIR.'/bootstrap/app.php')){
    $app = require_once WS_DIR.'/bootstrap/app.php';
    $kernel = $app->make(WpStarter\Contracts\Console\Kernel::class);
}
if(empty($kernel)){
    if(defined('ABSPATH')){//Found wp-load.php
        echo "\033[33mThe plugin is not activated\033[0m".PHP_EOL;
    }else{//No wp-load.php found and also no WpStarter found
        echo "\033[33mWordpress not found, please install WpStarter inside WordPress directory \033[0m".PHP_EOL;
    }
    exit(255) ;
}
/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
